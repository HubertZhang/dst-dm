// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: dm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DMServiceClient is the client API for DMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DMServiceClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (DMService_SessionClient, error)
}

type dMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMServiceClient(cc grpc.ClientConnInterface) DMServiceClient {
	return &dMServiceClient{cc}
}

func (c *dMServiceClient) Session(ctx context.Context, opts ...grpc.CallOption) (DMService_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &DMService_ServiceDesc.Streams[0], "/dmserver.blive.v1.DMService/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMServiceSessionClient{stream}
	return x, nil
}

type DMService_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionResponse, error)
	grpc.ClientStream
}

type dMServiceSessionClient struct {
	grpc.ClientStream
}

func (x *dMServiceSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMServiceSessionClient) Recv() (*SessionResponse, error) {
	m := new(SessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DMServiceServer is the server API for DMService service.
// All implementations must embed UnimplementedDMServiceServer
// for forward compatibility
type DMServiceServer interface {
	Session(DMService_SessionServer) error
	mustEmbedUnimplementedDMServiceServer()
}

// UnimplementedDMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDMServiceServer struct {
}

func (UnimplementedDMServiceServer) Session(DMService_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedDMServiceServer) mustEmbedUnimplementedDMServiceServer() {}

// UnsafeDMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DMServiceServer will
// result in compilation errors.
type UnsafeDMServiceServer interface {
	mustEmbedUnimplementedDMServiceServer()
}

func RegisterDMServiceServer(s grpc.ServiceRegistrar, srv DMServiceServer) {
	s.RegisterService(&DMService_ServiceDesc, srv)
}

func _DMService_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMServiceServer).Session(&dMServiceSessionServer{stream})
}

type DMService_SessionServer interface {
	Send(*SessionResponse) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type dMServiceSessionServer struct {
	grpc.ServerStream
}

func (x *dMServiceSessionServer) Send(m *SessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMServiceSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DMService_ServiceDesc is the grpc.ServiceDesc for DMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dmserver.blive.v1.DMService",
	HandlerType: (*DMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _DMService_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dm.proto",
}
